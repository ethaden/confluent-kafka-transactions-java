/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.confluent.csta.examples.transactions.producer.transactional;

import java.util.Properties;
import org.apache.kafka.clients.producer.*;

public class TransactionalProducer {
    public static void main(String[] args) {
        System.out.println("Hello world");
        Properties config = new Properties();
        config.put("client.id", "TransactionalProducer");
        // Make sure /etc/hosts contains aliases for localhost named kafka1, kafka2, kafka3
        config.put("bootstrap.servers", "kafka1:9091,kafka2:9092,kafka3:9093");
        config.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");
        config.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");
        config.put("key.deserializer",
                "org.apache.kafka.common.serialization.StringDeserializer");
        config.put("value.deserializer",
                "org.apache.kafka.common.serialization.StringDeserializer");
        config.put("acks", "all");
        config.put("enable.idempotence", "true");
        config.put("transactional.id", "prod-1");
        Producer<String, String> producer = new KafkaProducer<>(config);
        producer.initTransactions();
        for (int i=0; i<10; i++) {
            producer.beginTransaction();
            producer.send(new ProducerRecord<String,String>("topic-1",null,"a"+Integer.toString(i)));
            producer.send(new ProducerRecord<String,String>("topic-1",null,"b"+Integer.toString(i)));
            producer.send(new ProducerRecord<String,String>("topic-1",null,"c"+Integer.toString(i)));
            producer.send(new ProducerRecord<String,String>("topic-1",null,"d"+Integer.toString(i)));
            producer.commitTransaction();
        }
    }
}
