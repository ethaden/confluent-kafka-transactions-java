/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.confluent.csta.examples.transactions.producer.nontransactional;

import java.util.Properties;
import org.apache.kafka.clients.producer.*;
import java.io.*;
import java.nio.file.*;
import java.util.*;



public class NontransactionalProducer {

    public static Properties loadConfig(final String configFile) throws IOException {
        if (!Files.exists(Paths.get(configFile))) {
            throw new IOException(configFile + " not found.");
        }
        final Properties cfg = new Properties();
        try (InputStream inputStream = new FileInputStream(configFile)) {
            cfg.load(inputStream);
        }
        return cfg;
    }

    public static void main(String[] args) {
        if (args.length != 1) {
            System.err.println("Usage: java <jar file> <property file>");
            System.exit(1);
        }
        try {
            final Properties config = loadConfig(args[0]);
/*             config.put("client.id", "TransactionalProducer");
            // Make sure /etc/hosts contains aliases for localhost named kafka1, kafka2, kafka3
            config.put("bootstrap.servers", "kafka1:9091,kafka2:9092,kafka3:9093");
            */
            config.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");
            config.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
            config.put("value.serializer",
                    "org.apache.kafka.common.serialization.StringSerializer");
            config.put("value.deserializer",
                    "org.apache.kafka.common.serialization.StringDeserializer");
            config.put("acks", "all");
            config.put("enable.idempotence", "true");
            /*            config.put("transactional.id", "prod-1"); */
            String topic = config.getProperty("topic");
            config.remove("topic");
            Producer<String, String> producer = new KafkaProducer<>(config);
            for (int i = 0; i < 10; i++) {
                producer.send(new ProducerRecord<String, String>(topic, null,
                        "e" + Integer.toString(i)));
                producer.send(new ProducerRecord<String, String>(topic, null,
                        "f" + Integer.toString(i)));
                producer.send(new ProducerRecord<String, String>(topic, null,
                        "g" + Integer.toString(i)));
                producer.send(new ProducerRecord<String, String>(topic, null,
                        "h" + Integer.toString(i)));
            }
            producer.close();
        } catch (IOException e) {
            System.err.println("An exception occurred while load properties file: " + e);
            System.exit(1);
        }

    }
}
