/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.confluent.csta.examples.transactions.producer.transactionalchaos;

import org.apache.kafka.clients.producer.*;
import org.apache.kafka.common.header.Header;
import org.apache.kafka.common.header.internals.RecordHeader;
import java.io.*;
import java.nio.file.*;
import java.util.*;
import java.util.concurrent.ExecutionException;


public class TransactionalChaosProducer {

    public static Properties loadConfig(final String configFile) throws IOException {
        if (!Files.exists(Paths.get(configFile))) {
            throw new IOException(configFile + " not found.");
        }
        final Properties cfg = new Properties();
        try (InputStream inputStream = new FileInputStream(configFile)) {
            cfg.load(inputStream);
        }
        return cfg;
    }

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        if (args.length != 1) {
            System.err.println("Usage: java <jar file> <property file>");
            System.exit(1);
        }
        try {
            final Properties config = loadConfig(args[0]);
            config.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");
            config.put("value.serializer",
                    "org.apache.kafka.common.serialization.StringSerializer");
            config.put("acks", "all");
            config.put("enable.idempotence", "true");
            String topic = config.getProperty("topic");
            config.remove("topic");
            Properties chaosconfig = (Properties) config.clone();
            chaosconfig.setProperty("client.id", config.getProperty("client.id")+"-Chaos");
            chaosconfig.remove("transactional.id");
            try (Producer<String, String> producer = new KafkaProducer<>(config)) {
                producer.initTransactions();
                for (int i = 0; i < 10; i++) {
                    producer.beginTransaction();
                    /*
                     * List <Header> headers = new ArrayList<>(); headers.add(new
                     * RecordHeader("traceId", Long.toString(System.currentTimeMillis() /
                     * 1000L).getBytes()));
                     */
                    producer.send(new ProducerRecord<String, String>(topic, null, null, null,
                            "a" + Integer.toString(i),
                            Arrays.<Header>asList(new RecordHeader("traceId", Long
                                    .toString(System.currentTimeMillis() / 1000L).getBytes()))))
                                    .get()
                                    ;
                    producer.send(new ProducerRecord<String, String>(topic, null, null, null,
                            "b" + Integer.toString(i),
                            Arrays.<Header>asList(new RecordHeader("traceId", Long
                                    .toString(System.currentTimeMillis() / 1000L).getBytes()))))
                                    .get()
                                    ;
                    // Produce chaos: Send messages with different producer while transaction is not commited yet.
                    try (Producer<String, String> chaosproducer = new KafkaProducer<>(chaosconfig)) {
                        chaosproducer.send(new ProducerRecord<String, String>(topic, null, null, null,
                        "Non-transactional message causing chaos? Actually not, everything works!")).get();
                        System.out.println("Finished with chaos producer");
                    }
                    producer.send(new ProducerRecord<String, String>(topic, null, null, null,
                            "c" + Integer.toString(i),
                            Arrays.<Header>asList(new RecordHeader("traceId", Long
                                    .toString(System.currentTimeMillis() / 1000L).getBytes()))))
                            .get()
                            ;
                    producer.send(new ProducerRecord<String, String>(topic, null, null, null,
                            "d" + Integer.toString(i),
                            Arrays.<Header>asList(new RecordHeader("traceId", Long
                                    .toString(System.currentTimeMillis() / 1000L).getBytes()))))
                            .get()
                            ;
                    if (i % 2 == 1) {
                        // Oh no! Something went wrong and we need to abort this transaction
                        producer.abortTransaction();
                    } else {
                        producer.commitTransaction();
                    }
                }
            }
        } catch (IOException e) {
            System.err.println("An exception occurred while load properties file: " + e);
            System.exit(1);
        }

    }
}
